acf(diff(Champagne.ts),lag.max = 60)
acf(diff(diff(Champagne.ts),lag.max = 60)
acf(diff(diff(Champagne.ts)),lag.max = 60)
acf(diff(diff(Champagne.ts)),lag.max = 60)
?arima
arima(TractorSales.ts,order = c(1,1,0))
arima(TractorSales.ts,order = c(1,1,0),seasonal = list(order=(0,1,0)))
arima(TractorSales.ts,order = c(1,1,0),seasonal = list(order=(0,1,0)),period = 12)
arima(TractorSales.ts,order = c(1,1,0),seasonal = list(order=c(0,1,0)),period = 12)
arima(TractorSales.ts,order = c(1,1,0),seasonal = list(order=c(0,1,0)),period = 12)
arima(TractorSales.ts,order = c(1,1,0),seasonal = list(order=c(0,1,0),period = 12))
library(ggplot2)
?ggseasonplot
ggseasonplot(Champagne.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("$ million") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(Champagne.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Sales") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(Champagne.ts, year.labels=TRUE, year.labels.right=TRUE) +
ylab("Sales") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggseasonplot(Champagne.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Sales") +
ggtitle("Seasonal plot: antidiabetic drug sales")
ggsubseriesplot(Champagne.ts)
# Plots
ggseasonplot(TractorSales.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Sales") +
ggtitle("Seasonal plot: antidiabetic drug sales")
# Plots
ggseasonplot(TractorSales.ts, year.labels=TRUE, year.labels.left=TRUE) +
ylab("Sales") +
ggtitle("Seasonal plot: Tractor sales")
ggsubseriesplot(TractorSales.ts)
gglagplot(TractorSales.ts)
ggsubseriesplot(TractorSales.ts,lag=3)
ggsubseriesplot(TractorSales.ts,lag=3)
gglagplot(TractorSales.ts,lags = 4)
ggAcf(TractorSales.ts)
pi_1000_dec=[1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989]
pi_1000_dec=['1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989']
pi_1000_dec='1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989'
str(pi_1000_dec)
fact(3)
factorial(3)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
library(tseries)
library(forecast)
library(ggplot2)
setwd("C:/Users/Kushal/OneDrive/Documents/BABI/Time Series/Assignment")
fancyData=read.csv("fancy.dat.txt",header = TRUE)
#Convert into time series
fancyData.ts=ts(data = fancyData,start=c(1987,1),frequency = 12)
summary(fancyData.ts)
fancyData.ts
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
fancyData.ts.decompose=decompose(fancyData.ts)
plot(fancyData.ts.decompose)
hist(fancyData.ts.decompose$random,xlab = "Residuals", main = "Histogram of residuals from decomposition")
shapiro.test(fancyData.ts.decompose$random)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
acf(fancyData.ts, main = "")
pacf(fancyData.ts, main = "")
adf.test(fancyData.ts)
myArr=[5,4,3,2,1]
myArr=c(5,4,3,2,1)
myArr
print(2)
print("YES")
print("NO")
for (i in myArr){
if(val == 2)
print("YES")
else
print("NO")
}
if(i == 2)
for (i in myArr){
if(i == 2)
print("YES")
else
print("NO")
}
for (i in myArr){
if(i == 2)
print("YES")
else
print("NO")
}
for (i in myArr){
if(i == 2)
print("YES")
else
print("NO")
}
find=0
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(val == k)
find=TRUE
if(find == TRUE) {return("YES")}
}
myarr=c(5,4,3,2,1)
nu=3
findNumber(myarr,nu)
if(arr[i] == k)
find=TRUE
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(arr[i] == k)
find=TRUE
if(find == TRUE) {return("YES")}
}
findNumber(myarr,nu)
nu=32
findNumber(myarr,nu)
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(arr[i] == k)
find=TRUE
if(find == TRUE) {
return("YES")
else
return("NO")
}
}
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(arr[i] == k)
find=TRUE
if(find == TRUE) {
return("YES")
else
return("NO")
}
}
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(arr[i] == k)
find=TRUE
if(find == TRUE) {
return("YES")
else {return("NO")}
}
findNumber <- function(arr, k) {
find=FALSE
for (i in arr)
if(arr[i] == k)
find=TRUE
if(find == TRUE) {return("YES")}
else {return("NO")}
}
findNumber(myarr,nu)
a=3
b=10
oddNumbers <- function(l, r) {
# Write your code here
print(l)
print(r)
}
oddNumbers(a,b)
View(fancyData)
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(diff(fancyData.ts), ylab="Quantity",xlab="Year/Month", main="'Fancy' - 1st Order difference Time Series plot")
acf(diff(fancyData.ts), main = "")
pacf(diff(fancyData.ts), main = "")
adf.test(diff(fancyData.ts))
arima(fancyData.ts,order = c(1,0,0))
forecast(arima(fancyData.ts,order = c(1,0,0)))
forecast(arima(fancyData.ts,order = c(1,0,0)))
predict(arima(fancyData.ts,order = c(1,0,0)))
predict(arima(fancyData.ts,order = c(1,0,0)),h=3)
library(tseries)
library(forecast)
library(ggplot2)
setwd("C:/Users/Kushal/OneDrive/Documents/BABI/Time Series/Assignment")
fancyData=read.csv("fancy.dat.txt",header = TRUE)
#Convert into time series
fancyData.ts=ts(data = fancyData,start=c(1987,1),frequency = 12)
summary(fancyData.ts)
fancyData.ts
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
fancyData.ts.decompose=decompose(fancyData.ts)
plot(fancyData.ts.decompose)
hist(fancyData.ts.decompose$random,xlab = "Residuals", main = "Histogram of residuals from decomposition")
shapiro.test(fancyData.ts.decompose$random)
par(mfrow=c(3,1))
plot(fancyData.ts, type = "l",main = "Fancy")
plot(seasadj(decompose(fancyData.ts)), type = "l",main = "Seasonal Adjusted: Fancy")
seasonplot(seasadj(decompose(fancyData.ts)),12,col = rainbow(12),year.labels = TRUE,main = "Seasonal plot: Fancy")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(fancyData.ts, ylab="Quantity",xlab="Year/Month", main="'Fancy' - Time Series plot")
acf(fancyData.ts,  main = "",lag.max = 36)
pacf(fancyData.ts, main = "",lag.max = 36)
adf.test(fancyData.ts,alternative = "stationary")
adf.test(fancyData.ts,alternative = "explosive")
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(diff(fancyData.ts), ylab="Quantity",xlab="Year/Month", main="'Fancy' - 1st Order difference Time Series plot")
acf(diff(fancyData.ts), main = "",lag.max = 24)
pacf(diff(fancyData.ts), main = "",lag.max = 24)
adf.test(diff(fancyData.ts))
auto.arima(fancyData.ts)
arima(fancyData.ts,order = c(0,0,0))
arima(fancyData.ts,order = c(1,0,0))
arima(fancyData.ts,order = c(0,0,1))
arima(fancyData.ts,order = c(0,1,0))
arima(fancyData.ts,order = c(1,0,1))
arima(fancyData.ts,order = c(1,1,1))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset")
forecast(arima(fancyData.ts,order = c(1,0,0)),h=3)
forecast(arima(fancyData.ts,order = c(1,0,0)),h=3)$mean
forecast(arima(fancyData.ts,order = c(1,0,0)),h=(12*5))$mean
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,2))
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,2))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="",ylab(""))
?plot(fancyData.ts.test,main = "Test dataset",ylab="",y)
?plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
?plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
?plot(fancyData.ts.test,main = "Test dataset",ylab="",xaxt = "n")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
?plot(fancyData.ts.test,main = "Test dataset",ylab="")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(4,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
arima(fancyData.ts.train, order=c(1,1,1), seasonal = list(order = c(0, 1, 1), period = 12))
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "r")
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "l")
?plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "")
colors()
colors("gold")
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "")
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "l")
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "r")
#layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE))
layout(matrix(c(1,1,2,3), 2, 2, byrow = TRUE),
widths=c(3,1), heights=c(1,1))
plot(fancyData.ts,main = "Original dataset")
#Train set
fancyData.ts.train=window(fancyData.ts,end=c(1992,12))
plot(fancyData.ts.train,main = "Train dataset")
#Test set
fancyData.ts.test=window(fancyData.ts,start=c(1993,1))
plot(fancyData.ts.test,main = "Test dataset",ylab="",yaxt = "n")
forecast(arima(fancyData.ts,order = c(1,0,0)),h=(12*5))$mean
plot(forecast(arima(fancyData.ts,order = c(1,0,0)),h=(12*5))$mean)
forecast(arima(fancyData.ts,order = c(1,0,0)),h=(12*5))$mean
plot(forecast(auto.arima(fancyData.ts,h=(12*5))$mean)
plot(forecast(auto.arima(fancyData.ts),h=(12*5))$mean)
auto.arima(fancyData.ts)
forecast(auto.arima(fancyData.ts),h=(12*5))
forecast(auto.arima(fancyData.ts),h=(12*5))$mean
plot(forecast(auto.arima(fancyData.ts),h=(12*5))$mean)
ts.train.model=auto.arima(fancyData.ts.train)
plot(forecast(ts.train.model,h=(12))$mean)
forecast.fancy=forecast(ts.train.model,h=(12))
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
arima(fancyData.ts.train, order=c(1,1,1), seasonal = list(order = c(0, 1, 1), period = 12))
ts.train.model=auto.arima(fancyData.ts.train)
forecast.fancy=forecast(ts.train.model,h=(12))
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
?lines(forecast.fancy$mean,col=3)
arima(fancyData.ts.train, order=c(1,1,1), seasonal = list(order = c(0, 1, 1), period = 12))
ts.train.model=auto.arima(fancyData.ts.train)
forecast.fancy=forecast(ts.train.model,h=(12))
ts.train.model=auto.arima(fancyData.ts.train)
forecast.fancy=forecast(ts.train.model,h=(12))
ts.train.model=auto.arima(fancyData.ts.train)
forecast.fancy=forecast(ts.train.model,h=(12*5))
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
plot(forecast.fancy$mean)
summary(ts.train.model)
forecast.fancy=forecast(ts.train.model,h=(12))
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
forecast.fancy$residuals
forecast.fancy=forecast(ts.train.model,h=(12))
forecast.fancy$residuals
plot(forecast.fancy$mean)
forecast.fancy$residuals
plot(forecast.fancy$mean)
plot(forecast.fancy$residuals)
adf.test(forecast.fancy$residuals)
acf(forecast.fancy$residuals)
pacf(forecast.fancy$residuals)
forecast.fancy$residuals
plot(forecast.fancy$mean)
plot(forecast.fancy$residuals)
adf.test(forecast.fancy$residuals)
par(mfrow=c(2,1))
acf(forecast.fancy$residuals)
pacf(forecast.fancy$residuals)
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
plot(forecast.fancy$residuals)
adf.test(forecast.fancy$residuals)
par(mfrow=c(2,1))
acf(forecast.fancy$residuals)
pacf(forecast.fancy$residuals)
#plot actual vs. forecasted
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
#Plot residuals
plot(forecast.fancy$residuals)
#Check if the residuals are stationary
adf.test(forecast.fancy$residuals)
#plot ACF and PACF of residuals
par(mfrow=c(2,1))
acf(forecast.fancy$residuals)
pacf(forecast.fancy$residuals)
#plot actual vs. forecasted
plot(fancyData.ts.test)
lines(forecast.fancy$mean,col=3)
#Plot residuals
plot(forecast.fancy$residuals)
#Check if the residuals are stationary
adf.test(forecast.fancy$residuals)
#plot ACF and PACF of residuals
par(mfrow=c(2,1))
acf(forecast.fancy$residuals)
pacf(forecast.fancy$residuals)
summary(forecast.fancy)
forecast.fancy=forecast(data = fancyData.ts.test, ts.train.model,h=(12))
?forecast
#Check if the residuals are normally distributed
shapiro.test(forecast.fancy$residuals)
#Plot residuals
plot(forecast.fancy$residuals,type = 'h')
#Plot residuals
hist(forecast.fancy$residuals)
forecast.fancy=forecast(ts.train.model,data = fancyData.ts.test)
forecast.fancy=forecast(ts.train.model,fancyData.ts.test)
summary(forecast.fancy)
plot(forecast.fancy)
setwd("C:/Users/Kushal/OneDrive/Documents/GitHub/COVID-19/csse_covid_19_data/csse_covid_19_time_series")
wd
list.files( getwd() , pattern=NULL, all.files=FALSE, full.names=FALSE)
list.files( getwd() , pattern="time_series_19-covid-*.csv", all.files=FALSE, full.names=FALSE)
list.files( getwd() , pattern=time_series_19-covid-*.csv, all.files=FALSE, full.names=FALSE)
?list.files( getwd() , pattern=time_series_19-covid-*.csv, all.files=FALSE, full.names=FALSE)
?list.files
list.files(pattern="*.csv")
?list.files( getwd() , pattern="time_series_19-covid-*.csv", all.files=FALSE, full.names=FALSE)
list.files( getwd() , pattern="time_series_19-covid-*.csv", all.files=FALSE, full.names=FALSE)
list.files( getwd() , pattern="time_series_19-covid-*.csv", full.names=FALSE)
list.files( getwd() , pattern="time_series_19-covid-*.csv")
list.files(  pattern="time_series_19-covid-*.csv")
list.files(  pattern="*.csv")
list.files(  pattern="t*.csv")
list.files(pattern="time_series_19-covid*.csv")
list.files(pattern="time*.csv")
list.files(pattern="t*.csv")
list.files(pattern="tim*.csv")
list.files(pattern="*.csv")
covidConfirmed=read.csv("time_series_19-covid-Confirmed.csv",header = TRUE)
covidConfirmed
library(rpivotTable)
rpivotTable(covidConfirmed,width="100%", height="400px")
View(covidConfirmed)
colnames(covidConfirmed)
covidConfirmed.select(covidConfirmed.columns.filter(_.startsWith("colF")).map(covidConfirmed(_)) : _*).show
grep(colnames(covidConfirmed),"X*")
grep("X*",colnames(covidConfirmed))
grep("X*",colnames(covidConfirmed), value=TRUE, fixed=TRUE)
grep("X*",colnames(covidConfirmed), value=TRUE)
colnames(covidConfirmed) %like% "X*"
grep("x*",colnames(covidConfirmed), value=TRUE)
grep("x*",colnames(covidConfirmed))
grep("X",colnames(covidConfirmed))
grep("X",colnames(covidConfirmed), value=TRUE)
c(grep("X",colnames(covidConfirmed), value=TRUE))
dateFields=c(grep("X",colnames(covidConfirmed), value=TRUE))
table(covidConfirmed)
dat<- data.frame(date = c("2015-01-01","2015-01-01","2015-01-01", "2015-01-01","2015-02-02","2015-02-02","2015-02-02","2015-02-02","2015-02-02"), val= c(10,20,30,50,300,100,200,200,400), type= c("A","A","B","C","A","A","B","C","C") )
dat
table(dat[c(1,3)])
table(covidConfirmed[c(2,5)])
table(covidConfirmed[c(5,2)])
table(covidConfirmed[c(2:5)])
library(tidyr)
library(dplyr)
covidConfirmed %>%
group_by(Country.Region) %>%
summarise(Confirmed=sum(X1.22.20))
tibble()
tibble(covidConfirmed)
a1 <- c("a","a","b","b","c","d","e","e")
b2 <- c("01.01.2015", "02.02.2015", "14.02.2012", "16.08.2008", "17.06.2003", "31.01.2015", "07.01.2022", "09.05.2001")
c3 <- c("1a", "2b", "3c", "4d", "5e", "6f", "7g", "8h")
d3 <- c(1:8)
df2 <- data.frame(a1,b2,c3,d3, stringsAsFactors = F)
df2
df1 %>%
gather(X1.22.20, value, -id) %>%
mutate(X1.22.20 = as.Date(X1.22.20, format = "%m/%d/%Y"))
covidConfirmed %>%
gather(X1.22.20, value, -id) %>%
mutate(X1.22.20 = as.Date(X1.22.20, format = "%m/%d/%Y"))
covidConfirmed %>%
gather(X1.22.20, value, -Country.Region) %>%
mutate(X1.22.20 = as.Date(X1.22.20, format = "%m/%d/%Y"))
